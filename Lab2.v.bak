`timescale 1ns/ 1ns

module Lab2
(input clk,
input write,
input [4:0] wrAddr,
input [63:0] wrData,
input [4:0] rdAddrA,
output [63:0] rdDataA,
input [4:0] rdAddrB,
output [63:0] rdDataB);

reg [63:0] reg0, reg1, reg2, reg3, reg4, reg5;

assign rdData = rdAddrA == 0 ? reg0:
					 rdAddrA == 1 ? reg1:
					 rdAddrA == 2 ? reg2:
					 rdAddrA == 3 ? reg3: 
					 rdAddrA == 4 ? reg4:
					 rdAddrA == 5 ? reg5: 0;
assign rdDataB = rdAddrB == 0 ? reg0:
					 rdAddrB == 1 ? reg1:
					 rdAddrB == 2 ? reg2:
					 rdAddrB == 3 ? reg3: 
					 rdAddrB == 4 ? reg4:
					 rdAddrB == 5 ? reg5: 0;
always @ (posedge clk) begin 
	if (write)
		case (wrAddr)
		0: begin
			reg0 <= wrData;
		end 
		1: begin
			reg1 <= wrData;
		end 
		2: begin
			reg2 <= wrData;
		end 
		3: begin
			reg3 <= wrData;
		end 
		4: begin
			reg4 <= wrData;
		end 
		5: begin
			reg5 <= wrData;
		end 
	endcase // case (wrAddr)
end // always @ (posedge clk)
endmodule 